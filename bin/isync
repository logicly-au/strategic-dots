#!/usr/bin/perl -w
=head1 NAME

    isync - interactively rsync two directories

=head1 SYNOPSIS

    isync some_dir remote_host:some_other_dir

=head1 DESCRIPTION

This command runs rsync with --dry-run in each direction to build a 
list of files that would be synced.  $EDITOR is used to check and
prune the lists.  Then the real rsync is run using the tweaked file
lists.

=head1 TODO

There's hard-coded defaults to dwim ($remote, $rsync invocation).
Should be in %ENV;

=cut
use Proc::InvokeEditor;
use File::Temp 'tempfile';
use strict;

my $remote = 'thuathail'; # default
my ($dir1, $dir2);

if (@ARGV == 2) {
    ($dir1, $dir2) = @ARGV;
} elsif (@ARGV == 1) {
    # XXX should this
    # dwim name, assume $HOME/$name, check if it exists on both
    my $name = shift;
    ($dir1, $dir2) = ("$ENV{HOME}/$name/", "$remote:$name/");
    die "No $dir1 exists" if !-e $dir1;
    die "No $dir2 exists" if system("ssh $remote -- test -e $name") != 0;
} else {
    die "Need directories";
}

# check / at the end? see rsync options
warn "No ending / on '$dir1'\n" unless $dir1 =~ m[ /$ ]x;
warn "No ending / on '$dir2'\n" unless $dir2 =~ m[ /$ ]x;

my $diff12 = get_diff($dir1, $dir2);
my $diff21 = get_diff($dir2, $dir1);
sub get_diff {
    my ($from_dir, $to_dir) = @_;
    return
        join "", "# $from_dir -> $to_dir\n",
        grep { !m{\..*\.sw.$} } # vim swap files
        grep { !m{^(sent |total |building |receiving |.*/$|\s*$)} } 
         `rsync -avu --dry-run -e ssh $from_dir $to_dir`;
}

my $marker =  ("="x60)."\n";
my $orig_text = $diff12 . $marker . $diff21;
my $edited_text = Proc::InvokeEditor->edit($orig_text);
if ($edited_text eq $orig_text) {{
    print "File unchanged.  Do you want to proceed? [yn]\n";
    $_ = <STDIN>;
    chomp;
    redo unless /^[yn]$/i;
    exit(0) if /^n$/i;
}}

$edited_text =~ s/^#.*\n//g; # remove comments
my ($new_diff12, $new_diff21) = split $marker, $edited_text;
die "Couldn't find marker:\n$marker" unless $new_diff21;

run_rsync($dir1, $dir2, $new_diff12);
run_rsync($dir2, $dir1, $new_diff21);
print "\nisync successful\n";

sub run_rsync {
    my ($from_dir, $to_dir, $diff) = @_;
    my ($fh, $fn) = tempfile();
    print $fh $diff;

    my $cmd = "rsync -avu --files-from $fn -e ssh $from_dir $to_dir";
    print "\n\nSyncing $from_dir -> $to_dir\n";
    print "$cmd\n";
    sleep(1);
    system($cmd) == 0 or die $!;
}

__END__

print "=== $dir1 -> $dir2 ===\n";
print join "\n", @diff12, "\n";
print "=== $dir2 -> $dir1 ===\n";
print join "\n", @diff21, "\n";

for my $file (@diff12) {
    local ($") = "|";
    # quotemeta()
    if ($file =~ /^(@options)/) {
    } else {{
        print "send $dir1$file $dir2? [yYnN]\n";
        $_ = <STDIN>;
        chomp;
        redo unless /^[yYnN]$/;
    }}
    if ($_ eq 'y') {
        push @todo21, "$dir1$file";
    } elsif ($_ eq 'Y') {
        push @todo21, "$dir1$file";
        "$dir1$file";
    }
    
    print "rsync -lptgoDvu -n -e ssh $dir1$file $dir2\n";
}

print "Running $cmd12\nthen $cmd21\n";
sleep(2);
print `$cmd12`;
print "\n";
print `$cmd21`;

__END__
# send ogum -> thuathail
rsync -avu -n -e ssh ~/mp3/ thuathail:mp3/ | tee mp3.diff
rsync -avu -n --files-from=mp3.diff -e ssh ~/mp3 thuathail:mp3/
rsync -avu    --files-from=mp3.diff -e ssh ~/mp3 thuathail:mp3/

# fetch thuathail -> ogum
rsync -avu -n -e ssh thuathail:mp3/ ~/mp3 | tee mp3.diff
rsync -avu -n --files-from=mp3.diff -e ssh thuathail:mp3/ ~/mp3 
rsync -avu    --files-from=mp3.diff -e ssh thuathail:mp3/ ~/mp3 

rsync -avu -n -e ssh ~/mp3/ thuathail:mp3/ | g -v '^(sent|total|build|$)'| tee mp3.diff

rsync -avu -n -e ssh ~/pain/ thuathail:pain/
rsync -avu -e ssh ~/pain/ thuathail:pain/
rsync -avu -n -e ssh  thuathail:pain/ ~/pain/
rsync -avu -e ssh  thuathail:pain/ ~/pain/

